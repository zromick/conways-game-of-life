{"version":3,"sources":["components/Cell.js","components/Buttons.js","components/GameOfLife.js","App.js","index.js"],"names":["Cell","rowIndex","colIndex","newGrid","key","toggleCell","onClick","style","width","height","backgroundColor","undefined","border","Buttons","gridArray","setGridArray","advanceSimulation","setGrid","shuffle","createGrid","Button","color","variant","operations","GameOfLife","generateGrid","isBlankGrid","newRow","i","j","push","Math","random","newRows","map","row","items","col","Grid","container","item","direction","useState","grid","gridCopy","k","neighbors","forEach","x","y","newI","newK","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f47734a8.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Cell = ({ rowIndex, colIndex, newGrid, key, toggleCell }) => {\r\n\r\n  return (\r\n    <div\r\n      key={key}\r\n      onClick={() => toggleCell(rowIndex, colIndex, newGrid)}\r\n      style={{\r\n        width: 20,\r\n        height: 20,\r\n        backgroundColor: newGrid[rowIndex][colIndex] ? \"pink\" : undefined,\r\n        border: \"solid 1px grey\"\r\n      }}\r\n    />\r\n  )\r\n}\r\n\r\nexport default Cell\r\n","import React from 'react';\r\nimport { Button } from '@material-ui/core';\r\n\r\nconst Buttons = ({ gridArray, setGridArray, advanceSimulation, setGrid, shuffle, createGrid }) => {\r\n\r\n    return (\r\n        <>\r\n            <Button color=\"primary\" variant=\"outlined\"\r\n                onClick={() => advanceSimulation(gridArray)}\r\n            >\r\n                Advance Simulation\r\n            </Button>\r\n\r\n            <Button color=\"primary\" variant=\"outlined\"\r\n                onClick={() => {\r\n                    let isBlankGrid = false;\r\n                    setGrid(shuffle(isBlankGrid, setGridArray));\r\n                }}\r\n            >\r\n                Randomize Live Cells\r\n            </Button>\r\n            <Button color=\"primary\" variant=\"outlined\"\r\n                onClick={() => setGrid(createGrid(setGridArray))}\r\n            >\r\n                Clear Simulation\r\n            </Button>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Buttons;\r\n","import React, { useState } from 'react';\r\nimport Cell from './Cell';\r\nimport { Grid } from '@material-ui/core';\r\nimport Buttons from './Buttons';\r\n\r\nconst operations = [\r\n  [0, 1],\r\n  [0, -1],\r\n  [1, -1],\r\n  [-1, 1],\r\n  [1, 1],\r\n  [-1, -1],\r\n  [1, 0],\r\n  [-1, 0]\r\n];\r\n\r\nconst numRows = 20;\r\nconst numCols = 20;\r\n\r\nconst GameOfLife = () => {\r\n\r\n  // Cell Toggle Dead or Alive\r\n  const toggleCell = (rowIndex, colIndex, newGrid) => {\r\n    newGrid[rowIndex][colIndex]\r\n      ? newGrid[rowIndex][colIndex] = 0\r\n      : newGrid[rowIndex][colIndex] = 1;\r\n    setGrid(generateGrid(newGrid));\r\n  }\r\n\r\n  //Empty Grid\r\n  const createGrid = (setGridArray) => {\r\n    let isBlankGrid = true;\r\n    return shuffle(isBlankGrid, setGridArray);\r\n  }\r\n\r\n  // Random grid\r\n  const shuffle = (isBlankGrid, setGridArray) => {\r\n    let newGrid = [];\r\n    let newRow = [];\r\n    for (let i = 0; i < numRows; i++) {\r\n      for (let j = 0; j < numCols; j++) {\r\n        newRow.push((isBlankGrid ? 0 : (Math.random() > 0.7 ? 1 : 0)));\r\n      }\r\n      newGrid[i] = newRow;\r\n      newRow = [];\r\n    }\r\n\r\n    setGridArray(newGrid);\r\n\r\n    let newRows = newGrid.map((row, rowIndex) => {\r\n      let items = row.map((col, colIndex) => {\r\n        return <Cell\r\n          rowIndex={rowIndex}\r\n          colIndex={colIndex}\r\n          newGrid={newGrid}\r\n          key={`${rowIndex}row${colIndex}col`}\r\n          toggleCell={toggleCell}\r\n        />\r\n      })\r\n\r\n      let newRow =\r\n        <Grid container item>\r\n          {items}\r\n        </Grid>\r\n      return newRow;\r\n    })\r\n\r\n    let newList =\r\n      <Grid container direction='column'>\r\n        {newRows}\r\n      </Grid>\r\n\r\n    return newList;\r\n  }\r\n\r\n  // Set State\r\n  const [gridArray, setGridArray] = useState(() => []);\r\n  const [grid, setGrid] = useState(() => {\r\n    return createGrid(setGridArray);\r\n  });\r\n\r\n  // Grid Generation\r\n  const generateGrid = (grid) => {\r\n    let newRows = grid.map((row, rowIndex) => {\r\n      let items = row.map((col, colIndex) => {\r\n        return (\r\n          <Cell\r\n            rowIndex={rowIndex}\r\n            colIndex={colIndex}\r\n            newGrid={grid}\r\n            key={`${rowIndex}row${colIndex}col`}\r\n            toggleCell={toggleCell}\r\n          />\r\n        );\r\n      })\r\n\r\n      let newRow =\r\n        <Grid container item>\r\n          {items}\r\n        </Grid>\r\n      return newRow;\r\n    })\r\n\r\n    let newGrid =\r\n      <Grid container direction='column'>\r\n        {newRows}\r\n      </Grid>\r\n\r\n    return newGrid;\r\n  }\r\n\r\n  // Advance Simulation By One Step\r\n  // Uses John Horton Conway's algorithm\r\n  const advanceSimulation = (grid) => {\r\n    let gridCopy = grid;\r\n\r\n    for (let i = 0; i < numRows; i++) {\r\n      for (let k = 0; k < numCols; k++) {\r\n        let neighbors = 0;\r\n        operations.forEach(([x, y]) => {\r\n          const newI = i + x\r\n          const newK = k + y\r\n          if (newI >= 0 && newI < numRows && newK >= 0 && newK < numCols) {\r\n            neighbors += grid[newI][newK]\r\n          }\r\n        })\r\n\r\n        if (neighbors < 2 || neighbors > 3) {\r\n          gridCopy[i][k] = 0\r\n        } else if (grid[i][k] === 0 && neighbors === 3) {\r\n          gridCopy[i][k] = 1\r\n        }\r\n      }\r\n    }\r\n\r\n    setGridArray(gridCopy);\r\n    setGrid(generateGrid(gridCopy));\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      {grid}\r\n      <Buttons\r\n        gridArray={gridArray}\r\n        setGridArray={setGridArray}\r\n        advanceSimulation={advanceSimulation}\r\n        setGrid={setGrid}\r\n        shuffle={shuffle}\r\n        createGrid={createGrid}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default GameOfLife;\r\n","import React from 'react';\r\nimport GameOfLife from './components/GameOfLife';\r\n\r\nconst App = () => {\r\n  return (\r\n    <GameOfLife />\r\n  )\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}