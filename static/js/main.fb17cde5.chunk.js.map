{"version":3,"sources":["styles.module.scss","components/Buttons.js","components/Cell.js","components/GameGrid.js","components/GameOfLife.js","components/Patterns.js","App.js","index.js"],"names":["module","exports","Buttons","gridArray","setGridArray","setGrid","selectGridType","Grid","container","item","xs","justify","className","styles","buttonMargin","Tooltip","title","arrow","Button","color","variant","onClick","Cell","rowIndex","colIndex","newGrid","toggleCell","style","width","height","backgroundColor","undefined","border","GameGrid","grid","newRows","map","row","items","col","key","direction","operations","GameOfLife","generateGrid","gridType","newRow","i","j","push","Math","random","gosperGrid","length","advanceSimulation","useState","gridCopy","JSON","parse","stringify","k","neighbors","forEach","x","y","newI","newK","console","log","gridMargin","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fb17cde5.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"gridMargin\":\"styles_gridMargin__CAUJL\"};","import React from 'react';\r\nimport { Button, Grid, Tooltip } from '@material-ui/core';\r\nimport styles from '../styles.module.scss';\r\n\r\n// Buttons: Defines the visual button elements at the bottom of the screen.\r\nconst Buttons = ({ gridArray, setGridArray, setGrid, selectGridType }) => {\r\n\r\n    return (\r\n        <Grid container item xs={12}>\r\n            <Grid container item justify=\"center\" xs={3} className={styles.buttonMargin}>\r\n                <Tooltip title=\"Advance the simulation by a single step.\" arrow>\r\n                    <Button color=\"primary\" variant=\"outlined\"\r\n                        onClick={() => setGrid(selectGridType(\"advanceSimulation\", setGridArray, gridArray))}\r\n                    >\r\n                        Advance Simulation\r\n                    </Button>\r\n                </Tooltip>\r\n            </Grid>\r\n            <Grid container item justify=\"center\" xs={3}>\r\n                <Tooltip title=\"Create a new board with randomized alive and dead cells.\" arrow>\r\n                    <Button color=\"primary\" variant=\"outlined\"\r\n                        onClick={() => setGrid(selectGridType(\"random\", setGridArray, []))}\r\n                    >\r\n                        Randomize\r\n                    </Button>\r\n                </Tooltip>\r\n            </Grid>\r\n            <Grid container item justify=\"center\" xs={3}>\r\n                <Tooltip title=\"Create a Gosper Glider Gun model that creates gliders indefinitely!\" arrow>\r\n                    <Button color=\"primary\" variant=\"outlined\"\r\n                        onClick={() => setGrid(selectGridType(\"gosper-gun\", setGridArray, []))}\r\n                    >\r\n                        Create Gosper Glider Gun\r\n                    </Button>\r\n                </Tooltip>\r\n            </Grid>\r\n            <Grid container item justify=\"center\" xs={3}>\r\n                <Tooltip title=\"Kill all live cells.\" arrow>\r\n                    <Button color=\"primary\" variant=\"outlined\"\r\n                        onClick={() => setGrid(selectGridType(\"blank\", setGridArray, []))}\r\n                    >\r\n                        Clear Simulation\r\n                    </Button>\r\n                </Tooltip>\r\n            </Grid>\r\n        </Grid>\r\n    )\r\n}\r\n\r\nexport default Buttons;\r\n","import React from 'react';\r\n\r\n// Cell: Defines the visual layout of a cell and allows for cell toggling.\r\nconst Cell = ({ rowIndex, colIndex, newGrid, toggleCell }) => {\r\n\r\n  return (\r\n    <div\r\n      onClick={() => toggleCell(rowIndex, colIndex, newGrid)}\r\n      style={{\r\n        width: 10,\r\n        height: 10,\r\n        backgroundColor: newGrid[rowIndex][colIndex] ? \"pink\" : undefined,\r\n        border: \"solid 1px grey\"\r\n      }}\r\n    />\r\n  )\r\n}\r\n\r\nexport default Cell;\r\n","import React from 'react';\r\nimport Cell from './Cell';\r\nimport { Grid } from '@material-ui/core';\r\n\r\n// GameGrid: Defines the visual layout of rows and cells based on the given grid array.\r\nconst GameGrid = ({ grid, toggleCell }) => {\r\n  let newRows = grid.map((row, rowIndex) => {\r\n    let items = row.map((col, colIndex) => {\r\n      return (\r\n        <Cell\r\n          rowIndex={rowIndex}\r\n          colIndex={colIndex}\r\n          newGrid={grid}\r\n          key={`key-${rowIndex}row${colIndex}col`}\r\n          toggleCell={toggleCell}\r\n        />\r\n      );\r\n    })\r\n\r\n    let newRow =\r\n      <Grid container item key={`key-${rowIndex}row$`}>\r\n        {items}\r\n      </Grid>\r\n    return newRow;\r\n  })\r\n\r\n  let newGrid =\r\n    <Grid container direction='column'>\r\n      {newRows}\r\n    </Grid>\r\n\r\n  return newGrid;\r\n}\r\n\r\nexport default GameGrid;\r\n","import React, { useState } from 'react';\r\nimport Buttons from './Buttons';\r\nimport GameGrid from './GameGrid';\r\nimport { Grid } from '@material-ui/core';\r\nimport { GosperGun } from './Patterns';\r\nimport styles from '../styles.module.scss';\r\n\r\nconst operations = [\r\n  [0, 1],\r\n  [0, -1],\r\n  [1, -1],\r\n  [-1, 1],\r\n  [1, 1],\r\n  [-1, -1],\r\n  [1, 0],\r\n  [-1, 0]\r\n];\r\n\r\nconst numRows = 40;\r\nconst numCols = 40;\r\n\r\n// GameOfLife: Creates a grid that allows for simulation Conway's Game of Life.\r\nconst GameOfLife = () => {\r\n\r\n  // generateGrid: Build a visual layout for the given grid and set the new state.\r\n  const generateGrid = (newGrid) => {\r\n    return <GameGrid grid={newGrid} toggleCell={toggleCell} />;\r\n  }\r\n\r\n  // toggleCell: toggles whether a cell is dead or alive\r\n  const toggleCell = (rowIndex, colIndex, newGrid) => {\r\n    newGrid[rowIndex][colIndex]\r\n      ? newGrid[rowIndex][colIndex] = 0\r\n      : newGrid[rowIndex][colIndex] = 1;\r\n    setGrid(generateGrid(newGrid));\r\n  }\r\n\r\n  // selectGridType: Creates a new grid based on input type. Default is blank.\r\n  const selectGridType = (gridType, setGridArray, gridArray) => {\r\n    let newGrid = [];\r\n    let newRow = [];\r\n    for (let i = 0; i < numRows; i++) {\r\n      for (let j = 0; j < numCols; j++) {\r\n        newRow.push((gridType === \"random\" ? (Math.random() > 0.7 ? 1 : 0) : 0));\r\n      }\r\n      newGrid[i] = newRow;\r\n      newRow = [];\r\n    }\r\n    if (gridType === \"gosper-gun\") {\r\n      let gosperGrid = GosperGun();\r\n      for (let i = 0; i < gosperGrid.length; i++) {\r\n        newGrid[gosperGrid[i][0]][gosperGrid[i][1]] = 1;\r\n      }\r\n    }\r\n    else if (gridType === \"advanceSimulation\") {\r\n      newGrid = advanceSimulation(gridArray);\r\n    }\r\n\r\n    setGridArray(newGrid);\r\n    return generateGrid(newGrid);\r\n  }\r\n\r\n  // setGridArray: Sets the original array model of the grid and manages all future grid changes.\r\n  const [gridArray, setGridArray] = useState(() => []);\r\n\r\n  // setGrid: Sets the original visual layout of the grid and manages all future grid changes.\r\n  const [grid, setGrid] = useState(() => {\r\n    return selectGridType(\"blank\", setGridArray, []);\r\n  });\r\n\r\n  // advanceSimulation: Advance the simulation by one iteration of Conway's algorithm.\r\n  const advanceSimulation = (grid) => {\r\n    let gridCopy = JSON.parse(JSON.stringify(grid));\r\n\r\n    for (let i = 0; i < numRows; i++) {\r\n      for (let k = 0; k < numCols; k++) {\r\n        let neighbors = 0;\r\n        operations.forEach(([x, y]) => {\r\n          const newI = i + x;\r\n          const newK = k + y;\r\n          if (newI >= 0 && newI < numRows && newK >= 0 && newK < numCols) {\r\n            neighbors += grid[newI][newK];\r\n            console.log()\r\n          }\r\n        })\r\n\r\n        if (neighbors < 2 || neighbors > 3) {\r\n          gridCopy[i][k] = 0;\r\n        } else if (grid[i][k] === 0 && neighbors === 3) {\r\n          gridCopy[i][k] = 1;\r\n        }\r\n      }\r\n    }\r\n\r\n    return gridCopy;\r\n  }\r\n\r\n  return (\r\n    <Grid container justify=\"center\">\r\n      <Grid item>\r\n        <div className={styles.gridMargin}>\r\n          {grid}\r\n        </div>\r\n      </Grid>\r\n      <Buttons\r\n        gridArray={gridArray}\r\n        setGridArray={setGridArray}\r\n        setGrid={setGrid}\r\n        selectGridType={selectGridType}\r\n      />\r\n    </Grid>\r\n  )\r\n}\r\n\r\nexport default GameOfLife;\r\n","// GosperGun: Defines coordinates for live cells in the famous Gosper Gun pattern.\r\nexport const GosperGun = () => {\r\n  return ([\r\n    [5, 1],\r\n    [5, 2],\r\n    [6, 1],\r\n    [6, 2],\r\n    [5, 11],\r\n    [6, 11],\r\n    [7, 11],\r\n    [4, 12],\r\n    [3, 13],\r\n    [3, 14],\r\n    [8, 12],\r\n    [9, 13],\r\n    [9, 14],\r\n    [6, 15],\r\n    [4, 16],\r\n    [5, 17],\r\n    [6, 17],\r\n    [7, 17],\r\n    [6, 18],\r\n    [8, 16],\r\n    [3, 21],\r\n    [4, 21],\r\n    [5, 21],\r\n    [3, 22],\r\n    [4, 22],\r\n    [5, 22],\r\n    [2, 23],\r\n    [6, 23],\r\n    [1, 25],\r\n    [2, 25],\r\n    [6, 25],\r\n    [7, 25],\r\n    [3, 35],\r\n    [4, 35],\r\n    [3, 36],\r\n    [4, 36],\r\n  ]);\r\n}","import React from 'react';\r\nimport GameOfLife from './components/GameOfLife';\r\n\r\nconst App = () => {\r\n  return (\r\n    <GameOfLife />\r\n  )\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}